#!/usr/bin/env ruby

# repl(1) -- sometimes you need a repl
#
# repl is an interactive program which tenderly wraps another,
# non-interactive program.
#
# For example:
#
#   $ repl redis-cli
#   >> set name chris
#   OK
#   >> get name
#   chris
#
# If you have rlwrap(1) installed you'll get the full benefits of
# readline: history, reverse searches, etc.

def show_help
  puts <<-help
Usage: repl [options] command ...

Options:
  --help    Display this message
  --debug   Display each command executed
  --man     Display the man page

Bug reports, suggestions, updates:
http://http://github.com/defunkt/repl/issues
help
  exit
end

if ARGV.empty? || ARGV.any? { |arg| %w( -h --help -help help ).include?(arg) }
  show_help
end

if ARGV.include? '--man'
  dir = File.dirname(__FILE__)
  exec "man #{dir}/../man/repl.1"
end

completion_dir = ENV['REPL_COMPLETION_DIR'] || "~/.repl"
if File.exists?(cdir = File.expand_path(completion_dir))
  script = ARGV.detect { |a| a !~ /^-/ }
  if script
    cfile = Dir[cdir + '/' + script].first
    cfile = nil if cfile && !File.exists?(cfile)
  end
end

if !ENV['__REPL_WRAPPED'] && system("which rlwrap > /dev/null")
  ENV['__REPL_WRAPPED'] = '0'
  rlargs = "-f #{cfile}" if cfile
  exec "rlwrap #{rlargs} #$0 #{ARGV.join(' ')}"
end

if ARGV[0] == '--debug'
  debug = ARGV.delete('--debug')
end

command = ARGV.join(' ')
run     = Proc.new {|line| (command + " %s") % [line, nil] }
show_help if command.empty?

if debug
  print 'rlwrap ' if ENV['__REPL_WRAPPED']
  print "-f #{cfile} " if cfile
  puts command.inspect
end

loop do
  print ENV['REPL_PROMPT'] || '>> '

  begin
    line = $stdin.gets.chomp
  rescue NoMethodError, Interrupt
    exit
  end

  puts "$ #{run[line]}" if debug
  system "#{run[line]}"
  warn "Use Ctrl-D (i.e. EOF) to exit" if line =~ /^(exit|quit)$/
end
